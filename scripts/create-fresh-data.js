// scripts/create-fresh-data.js
// Create fresh data with proper encoding
const Database = require('better-sqlite3');
const bcrypt = require('bcryptjs');
const path = require('path');

const devDbPath = path.join(__dirname, '../prisma/dev.db');

console.log('üÜï Creating fresh data with proper encoding...\n');

try {
  const db = new Database(devDbPath);

  // Create users first
  console.log('üë• Creating users...');
  const insertUser = db.prepare(`
    INSERT INTO users (username, password, role, name, active, created_at)
    VALUES (?, ?, ?, ?, ?, datetime('now'))
  `);

  const ownerPassword = bcrypt.hashSync('owner123', 10);
  const staffPassword = bcrypt.hashSync('staff123', 10);

  insertUser.run('owner', ownerPassword, 'OWNER', '‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô', 1);
  insertUser.run('staff', staffPassword, 'STAFF', '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', 1);
  console.log('‚úÖ Created 2 users');

  // Create categories
  console.log('\nüè∑Ô∏è Creating categories...');
  const insertCategory = db.prepare(`
    INSERT INTO categories (name, description, active, created_by, created_at)
    VALUES (?, ?, ?, 1, datetime('now'))
  `);

  const categories = [
    { name: '‡∏Å‡∏≤‡πÅ‡∏ü', description: '‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡∏≤‡πÅ‡∏ü‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏Å‡∏≤‡πÅ‡∏ü' },
    { name: '‡∏Ç‡∏ô‡∏°', description: '‡∏Ç‡∏ô‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô' },
    { name: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', description: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó' },
    { name: '‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', description: '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô' }
  ];

  categories.forEach(cat => {
    insertCategory.run(cat.name, cat.description, 1);
  });
  console.log(`‚úÖ Created ${categories.length} categories`);

  // Create products
  console.log('\nüì¶ Creating products...');
  const insertProduct = db.prepare(`
    INSERT INTO products (name, category_id, unit, minimum_stock, description, active, created_by, created_at, updated_at)
    VALUES (?, ?, ?, ?, ?, ?, 1, datetime('now'), datetime('now'))
  `);

  const products = [
    // ‡∏Å‡∏≤‡πÅ‡∏ü
    { name: '‡πÄ‡∏≠‡∏™‡πÄ‡∏õ‡∏£‡∏™‡πÇ‡∏ã‡πà', categoryId: 1, unit: '‡∏ñ‡πâ‡∏ß‡∏¢', minStock: 10, desc: '‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏≠‡∏™‡πÄ‡∏õ‡∏£‡∏™‡πÇ‡∏ã‡πà‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô' },
    { name: '‡∏•‡∏≤‡πÄ‡∏ï‡πâ', categoryId: 1, unit: '‡∏ñ‡πâ‡∏ß‡∏¢', minStock: 15, desc: '‡∏Å‡∏≤‡πÅ‡∏ü‡∏•‡∏≤‡πÄ‡∏ï‡πâ‡∏ô‡∏°‡∏ô‡∏ß‡∏•' },
    { name: '‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà', categoryId: 1, unit: '‡∏ñ‡πâ‡∏ß‡∏¢', minStock: 12, desc: '‡∏Å‡∏≤‡πÅ‡∏ü‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà‡πÇ‡∏ü‡∏°‡∏´‡∏ô‡∏≤' },
    { name: '‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà', categoryId: 1, unit: '‡∏ñ‡πâ‡∏ß‡∏¢', minStock: 20, desc: '‡∏Å‡∏≤‡πÅ‡∏ü‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô' },

    // ‡∏Ç‡∏ô‡∏°
    { name: '‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ä‡πá‡∏≠‡∏Ñ‡πÇ‡∏Å‡πÅ‡∏•‡∏ï', categoryId: 2, unit: '‡∏ä‡∏¥‡πâ‡∏ô', minStock: 30, desc: '‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ä‡πá‡∏≠‡∏Ñ‡πÇ‡∏Å‡πÅ‡∏•‡∏ï‡∏Å‡∏£‡∏≠‡∏ö‡∏≠‡∏£‡πà‡∏≠‡∏¢' },
    { name: '‡πÄ‡∏Ñ‡πâ‡∏Å‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß', categoryId: 2, unit: '‡∏ä‡∏¥‡πâ‡∏ô', minStock: 20, desc: '‡πÄ‡∏Ñ‡πâ‡∏Å‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß‡∏´‡∏≠‡∏°‡∏´‡∏ß‡∏≤‡∏ô' },
    { name: '‡∏Ñ‡∏£‡∏±‡∏ß‡∏ã‡∏≠‡∏á', categoryId: 2, unit: '‡∏ä‡∏¥‡πâ‡∏ô', minStock: 25, desc: '‡∏Ñ‡∏£‡∏±‡∏ß‡∏ã‡∏≠‡∏á‡πÄ‡∏ô‡∏¢‡πÄ‡∏ü‡∏£‡∏ô‡∏ä‡πå' },

    // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°
    { name: '‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏°‡∏Ñ‡∏±‡πâ‡∏ô', categoryId: 3, unit: '‡πÅ‡∏Å‡πâ‡∏ß', minStock: 15, desc: '‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏°‡∏Ñ‡∏±‡πâ‡∏ô‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà' },
    { name: '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢', categoryId: 3, unit: '‡πÅ‡∏Å‡πâ‡∏ß', minStock: 18, desc: '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏±‡∏ô' },
    { name: '‡∏°‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤', categoryId: 3, unit: '‡πÅ‡∏Å‡πâ‡∏ß', minStock: 12, desc: '‡∏°‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏£‡πâ‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏¢‡πá‡∏ô' },

    // ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    { name: '‡πÅ‡∏Å‡πâ‡∏ß‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©', categoryId: 4, unit: '‡πÉ‡∏ö', minStock: 100, desc: '‡πÅ‡∏Å‡πâ‡∏ß‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡πÉ‡∏™‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°' },
    { name: '‡∏ù‡∏≤‡∏Å‡∏¥‡πÇ‡∏•', categoryId: 4, unit: '‡πÉ‡∏ö', minStock: 100, desc: '‡∏ù‡∏≤‡∏õ‡∏¥‡∏î‡πÅ‡∏Å‡πâ‡∏ß‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©' }
  ];

  products.forEach(product => {
    insertProduct.run(
      product.name,
      product.categoryId,
      product.unit,
      product.minStock,
      product.desc,
      1
    );
  });
  console.log(`‚úÖ Created ${products.length} products`);

  // Create sample stock data
  console.log('\nüìä Creating sample stock data...');
  const insertStockLog = db.prepare(`
    INSERT INTO stock_logs (product_id, date, quantity_remaining, created_by, notes, created_at)
    VALUES (?, ?, ?, 1, ?, datetime('now'))
  `);

  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);

  const productIds = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

  productIds.forEach(productId => {
    // Yesterday stock
    const yesterdayStock = Math.random() * 50 + 20; // 20-70
    insertStockLog.run(
      productId,
      yesterday.toISOString().split('T')[0],
      Math.round(yesterdayStock * 100) / 100,
      '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô'
    );

    // Today stock (less than yesterday)
    const usage = yesterdayStock * (0.1 + Math.random() * 0.3); // ‡πÉ‡∏ä‡πâ 10-40%
    const todayStock = Math.max(0, yesterdayStock - usage);
    insertStockLog.run(
      productId,
      today.toISOString().split('T')[0],
      Math.round(todayStock * 100) / 100,
      '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'
    );
  });

  console.log(`‚úÖ Created ${productIds.length * 2} stock log entries`);

  // Show summary
  console.log('\nüìã Database Summary:');
  console.log('- Users: 2 (owner, staff)');
  console.log('- Categories: 4 (‡∏Å‡∏≤‡πÅ‡∏ü, ‡∏Ç‡∏ô‡∏°, ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°, ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)');
  console.log('- Products: 12 (clean Thai names)');
  console.log('- Stock Logs: 24 (2 days of data)');

  db.close();

  console.log('\nüéâ Fresh data created successfully!');
  console.log('\nüí° Login credentials:');
  console.log('- Username: owner / Password: owner123');
  console.log('- Username: staff / Password: staff123');

} catch (error) {
  console.error('‚ùå Error creating fresh data:', error);
  process.exit(1);
}