// src/hooks/useRealTimeToast.ts
import React, { useEffect } from 'react'
import { toast } from 'sonner'
import { useEventBus, PRODUCT_EVENTS, DASHBOARD_EVENTS } from '@/lib/eventBus'

export function useRealTimeToast() {
  // Product events notifications
  useEventBus(PRODUCT_EVENTS.CREATED, (eventData) => {
    if (eventData.product) {
      toast.success(`üì¶ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${eventData.product.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, {
        duration: 3000,
      })
    }
  }, [])

  useEventBus(PRODUCT_EVENTS.UPDATED, (eventData) => {
    if (eventData.product) {
      toast.success(`‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "${eventData.product.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, {
        duration: 3000,
      })
    }
  }, [])

  useEventBus(PRODUCT_EVENTS.DELETED, (eventData) => {
    toast.success(`üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, {
      duration: 3000,
    })
  }, [])

  useEventBus(PRODUCT_EVENTS.STOCK_UPDATED, (eventData) => {
    if (eventData.product) {
      const stockStatus = eventData.newStock <= eventData.product.minimumStock ? '‚ö†Ô∏è' : '‚úÖ'
      toast.success(`${stockStatus} ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å "${eventData.product.name}" ‡πÄ‡∏õ‡πá‡∏ô ${eventData.newStock} ${eventData.product.unit}`, {
        duration: 4000,
      })
    }
  }, [])

  // Dashboard refresh notifications
  useEventBus(DASHBOARD_EVENTS.DATA_CHANGED, (eventData) => {
    const messages = {
      'product-created': 'üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà',
      'product-updated': 'üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
      'product-deleted': 'üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß - ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
      'stock-update': 'üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å',
    }

    const message = messages[eventData?.type as keyof typeof messages]
    if (message) {
      toast.info(message, {
        duration: 2000,
      })
    }
  }, [])
}

// Auto-initialize toast system
export function RealTimeToastProvider({ children }: { children: React.ReactNode }) {
  useRealTimeToast()
  return <>{children}</>
}